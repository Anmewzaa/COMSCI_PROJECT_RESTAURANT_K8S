pipeline {
  agent any

  environment {
      SONARSCANNER = 'SonarQube'
      SONARSERVER = 'SonarQube'
      // HOST_NAME = 'asia-southeast1-docker.pkg.dev'
      // PROJECT_ID = 'proven-citizen-429506-e2'
      // REGISTRY_NAME = 'project-registry'
      // IMAGE_NAME = 'project'
  }

  stages {
      stage('Cleanup Workspace') {
        steps {
          cleanWs()
        }
      }
      stage('Git Check Out') {
        steps {
          checkout scmGit(branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[credentialsId: 'GITHUB_ACCESS_TOKENS', url: 'https://github.com/Anmewzaa/COMSCI_PROJECT_RESTAURANT_APP_CUSTOMER']])
        }
      }
      stage('OWASP Dependency-Check Vulnerabilities') {
        steps {
          script {
            try {
            dependencyCheck additionalArguments: '''
                -o './' 
                -s './' 
                -f 'ALL' 
                --prettyPrint
                ''', 
                odcInstallation: 'OWASP_DEPENDENCY_CHECK'
            
            dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            echo "Dependency check completed successfully!"
            } catch (Exception e) {
                echo "Dependency check failed: ${e.message}"
                currentBuild.result = 'FAILURE'
                error("Stopping the pipeline as vulnerabilities were found.")
            }
          }
        }
      }
      stage('SonarQube Analysis') {
          environment {
            scannerHome = tool "${SONARSCANNER}"
          }
          steps {
            withSonarQubeEnv("${SONARSERVER}") {
            sh ("""
              ${scannerHome}/bin/sonar-scanner \
                -D sonar.projectKey=COMSCI_PROJECT_SONARQUBE_DEV \
                -D sonar.projectName=COMSCI_PROJECT_SONARQUBE_DEV \
                -D sonar.projectVersion=1.0.0 \
                -D sonar.sources=./project/src \
                -D sonar.test.inclusions="**/test/**" \
                -D sonar.exclusions="**/node_modules/**, **/dist/**"
            """)
            }
          }
      }
      stage('Build and Push Docker Images') {
        steps {
          script {
            env.VERSION = "v0.1.${BUILD_NUMBER}"
            sh('''
                sudo docker build -t comsci-project-customer-dev:${VERSION} ./project/
              ''')
          }
        }
      }
      stage('Scan with Trivy') {
            steps {
                script {
                    env.VERSION = "v0.1.${BUILD_NUMBER}"
                    sh '''
                      trivy image --scanners vuln --format json --output trivy-report.json comsci-project-customer-dev:${VERSION}
                    '''
                }
            }
        }
        stage('Publish Artifacts') {
            steps {
                archiveArtifacts artifacts: 'trivy-report.json', allowEmptyArchive: true
            }
        }
        stage('Check Vulnerabilities') {
            steps {
                script {
                    def trivyReport = readFile('trivy-report.json')
                    def vulnerabilities = readJSON text: trivyReport

                    if (vulnerabilities.Results.findAll { it.Vulnerabilities }.size() > 0) {
                        currentBuild.result = 'UNSTABLE'
                        echo 'Vulnerabilities found in the Docker image!'
                    } else {
                        echo 'No vulnerabilities found!'
                    }
                }
            }
        }
      // stage('Clean up Docker Image') {
      //     steps {
      //       sh('''
      //         sudo docker push ${HOST_NAME}/${PROJECT_ID}/${REGISTRY_NAME}/${IMAGE_NAME}:${VERSION}
      //         sudo docker rmi ${HOST_NAME}/${PROJECT_ID}/${REGISTRY_NAME}/${IMAGE_NAME}:${VERSION}
      //       ''')
      //     }
      // }
      // stage('Trigger Manifest Update') {
      //     steps {
      //       build job:'UpdateGitops',parameters: [string(name:'DOCKERTAG',value: "v0.1.${BUILD_NUMBER}")]
      //     }
      // }
  }
}